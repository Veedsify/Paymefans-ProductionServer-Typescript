
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.1
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.1",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  password: 'password',
  fullname: 'fullname',
  user_id: 'user_id',
  username: 'username',
  admin: 'admin',
  role: 'role',
  is_active: 'is_active',
  is_verified: 'is_verified',
  is_email_verified: 'is_email_verified',
  is_model: 'is_model',
  email_verify_code: 'email_verify_code',
  email_verify_time: 'email_verify_time',
  is_phone_verified: 'is_phone_verified',
  phone: 'phone',
  profile_image: 'profile_image',
  profile_banner: 'profile_banner',
  bio: 'bio',
  location: 'location',
  website: 'website',
  country: 'country',
  state: 'state',
  city: 'city',
  zip: 'zip',
  currency: 'currency',
  post_watermark: 'post_watermark',
  total_followers: 'total_followers',
  total_following: 'total_following',
  total_subscribers: 'total_subscribers',
  active_status: 'active_status',
  max_post_count: 'max_post_count',
  hasPin: 'hasPin',
  created_at: 'created_at',
  updated_at: 'updated_at',
  show_active: 'show_active',
  watermarkEnabled: 'watermarkEnabled',
  delete_date: 'delete_date',
  should_delete: 'should_delete',
  flags: 'flags'
};

exports.Prisma.ParticipantsScalarFieldEnum = {
  id: 'id',
  user_1: 'user_1',
  user_2: 'user_2',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ConversationsScalarFieldEnum = {
  id: 'id',
  conversation_id: 'conversation_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.MessagesScalarFieldEnum = {
  id: 'id',
  message_id: 'message_id',
  sender_id: 'sender_id',
  receiver_id: 'receiver_id',
  seen: 'seen',
  message: 'message',
  attachment: 'attachment',
  isSystemMessage: 'isSystemMessage',
  created_at: 'created_at',
  updated_at: 'updated_at',
  conversationsId: 'conversationsId',
  groupsId: 'groupsId',
  story_reply: 'story_reply'
};

exports.Prisma.OldUsernameScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  old_username: 'old_username',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ModelScalarFieldEnum = {
  id: 'id',
  firstname: 'firstname',
  lastname: 'lastname',
  user_id: 'user_id',
  gender: 'gender',
  dob: 'dob',
  country: 'country',
  hookup: 'hookup',
  payment_status: 'payment_status',
  payment_reference: 'payment_reference',
  verification_video: 'verification_video',
  verification_image: 'verification_image',
  verification_status: 'verification_status',
  verification_state: 'verification_state',
  token: 'token',
  created_at: 'created_at',
  watermark: 'watermark'
};

exports.Prisma.UploadedMediaScalarFieldEnum = {
  id: 'id',
  media_id: 'media_id',
  user_id: 'user_id',
  key: 'key',
  type: 'type',
  url: 'url',
  name: 'name',
  size: 'size',
  extension: 'extension',
  media_state: 'media_state',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.UserMediaScalarFieldEnum = {
  id: 'id',
  media_id: 'media_id',
  post_id: 'post_id',
  media_type: 'media_type',
  media_state: 'media_state',
  duration: 'duration',
  url: 'url',
  blur: 'blur',
  poster: 'poster',
  locked: 'locked',
  accessible_to: 'accessible_to',
  created_at: 'created_at',
  updated_at: 'updated_at',
  user_id: 'user_id'
};

exports.Prisma.UserRepostScalarFieldEnum = {
  id: 'id',
  repost_id: 'repost_id',
  user_id: 'user_id',
  post_id: 'post_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.UserStoryScalarFieldEnum = {
  id: 'id',
  story_id: 'story_id',
  user_id: 'user_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.StoryMediaScalarFieldEnum = {
  id: 'id',
  media_id: 'media_id',
  media_type: 'media_type',
  filename: 'filename',
  story_content: 'story_content',
  duration: 'duration',
  user_id: 'user_id',
  media_state: 'media_state',
  created_at: 'created_at',
  updated_at: 'updated_at',
  captionElements: 'captionElements',
  media_url: 'media_url'
};

exports.Prisma.StoryViewScalarFieldEnum = {
  id: 'id',
  story_media_id: 'story_media_id',
  viewer_id: 'viewer_id',
  viewed_at: 'viewed_at',
  userStoryId: 'userStoryId'
};

exports.Prisma.PostScalarFieldEnum = {
  id: 'id',
  post_id: 'post_id',
  was_repost: 'was_repost',
  repost_username: 'repost_username',
  repost_id: 'repost_id',
  user_id: 'user_id',
  content: 'content',
  media: 'media',
  post_price: 'post_price',
  post_status: 'post_status',
  post_audience: 'post_audience',
  post_is_visible: 'post_is_visible',
  post_likes: 'post_likes',
  post_comments: 'post_comments',
  post_reposts: 'post_reposts',
  post_impressions: 'post_impressions',
  created_at: 'created_at',
  updated_at: 'updated_at',
  watermark_enabled: 'watermark_enabled'
};

exports.Prisma.PostImpressionScalarFieldEnum = {
  id: 'id',
  post_id: 'post_id',
  user_id: 'user_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ProfileViewScalarFieldEnum = {
  id: 'id',
  profile_id: 'profile_id',
  viewer_id: 'viewer_id',
  ip_address: 'ip_address',
  created_at: 'created_at'
};

exports.Prisma.CommentViewScalarFieldEnum = {
  id: 'id',
  comment_id: 'comment_id',
  user_id: 'user_id',
  ip_address: 'ip_address',
  created_at: 'created_at'
};

exports.Prisma.PostCommentScalarFieldEnum = {
  id: 'id',
  comment_id: 'comment_id',
  user_id: 'user_id',
  post_id: 'post_id',
  comment: 'comment',
  comment_impressions: 'comment_impressions',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.CommentImpressionScalarFieldEnum = {
  id: 'id',
  comment_id: 'comment_id',
  user_id: 'user_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  postId: 'postId'
};

exports.Prisma.PostCommentAttachmentsScalarFieldEnum = {
  id: 'id',
  comment_id: 'comment_id',
  path: 'path',
  type: 'type',
  name: 'name',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.PostCommentLikesScalarFieldEnum = {
  id: 'id',
  like_id: 'like_id',
  user_id: 'user_id',
  comment_id: 'comment_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.PostLikeScalarFieldEnum = {
  id: 'id',
  like_id: 'like_id',
  user_id: 'user_id',
  post_id: 'post_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.PostSharedScalarFieldEnum = {
  id: 'id',
  shared_id: 'shared_id',
  user_id: 'user_id',
  post_id: 'post_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.FollowScalarFieldEnum = {
  id: 'id',
  follow_id: 'follow_id',
  user_id: 'user_id',
  follower_id: 'follower_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.SubscribersScalarFieldEnum = {
  id: 'id',
  sub_id: 'sub_id',
  user_id: 'user_id',
  subscriber_id: 'subscriber_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  status: 'status'
};

exports.Prisma.LiveStreamScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  username: 'username',
  stream_id: 'stream_id',
  stream_token: 'stream_token',
  user_stream_id: 'user_stream_id',
  title: 'title',
  stream_call_id: 'stream_call_id',
  stream_status: 'stream_status',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.LiveStreamParticipantsScalarFieldEnum = {
  id: 'id',
  stream_id: 'stream_id',
  host_id: 'host_id',
  participant_id: 'participant_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  liveStreamId: 'liveStreamId'
};

exports.Prisma.LiveStreamCommentScalarFieldEnum = {
  id: 'id',
  live_comment_id: 'live_comment_id',
  user_id: 'user_id',
  live_id: 'live_id',
  comment: 'comment',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.LiveStreamLikeScalarFieldEnum = {
  id: 'id',
  live_like_id: 'live_like_id',
  user_id: 'user_id',
  live_id: 'live_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.LiveStreamViewScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  live_id: 'live_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.SettingsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  price_per_message: 'price_per_message',
  subscription_active: 'subscription_active',
  enable_free_message: 'enable_free_message',
  subscription_price: 'subscription_price',
  subscription_type: 'subscription_type',
  subscription_duration: 'subscription_duration',
  two_factor_auth: 'two_factor_auth',
  instagram_url: 'instagram_url',
  twitter_url: 'twitter_url',
  facebook_url: 'facebook_url',
  snapchat_url: 'snapchat_url',
  tiktok_url: 'tiktok_url',
  telegram_url: 'telegram_url',
  youtube_url: 'youtube_url',
  watermark_uid: 'watermark_uid',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.NotificationsScalarFieldEnum = {
  id: 'id',
  notification_id: 'notification_id',
  user_id: 'user_id',
  message: 'message',
  action: 'action',
  url: 'url',
  read: 'read',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ReportUserScalarFieldEnum = {
  id: 'id',
  report_id: 'report_id',
  user_id: 'user_id',
  reported_id: 'reported_id',
  report_type: 'report_type',
  report: 'report',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ReportPostScalarFieldEnum = {
  id: 'id',
  report_id: 'report_id',
  user_id: 'user_id',
  post_id: 'post_id',
  report_type: 'report_type',
  report: 'report',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ReportCommentScalarFieldEnum = {
  id: 'id',
  report_id: 'report_id',
  user_id: 'user_id',
  comment_id: 'comment_id',
  report_type: 'report_type',
  report: 'report',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ReportLiveScalarFieldEnum = {
  id: 'id',
  report_id: 'report_id',
  user_id: 'user_id',
  live_id: 'live_id',
  report_type: 'report_type',
  report: 'report',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ReportMessageScalarFieldEnum = {
  id: 'id',
  report_id: 'report_id',
  user_id: 'user_id',
  message_id: 'message_id',
  report_type: 'report_type',
  report: 'report',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.UserPointsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  points: 'points',
  conversion_rate: 'conversion_rate',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.PointConversionRateUsersScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  pointConversionRateId: 'pointConversionRateId'
};

exports.Prisma.PointConversionRateScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  points: 'points'
};

exports.Prisma.UserWalletScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  wallet_id: 'wallet_id',
  balance: 'balance',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.UserTransactionScalarFieldEnum = {
  id: 'id',
  transaction_id: 'transaction_id',
  user_id: 'user_id',
  wallet_id: 'wallet_id',
  amount: 'amount',
  transaction_message: 'transaction_message',
  transaction: 'transaction',
  transaction_type: 'transaction_type',
  currency: 'currency',
  exchange_rate: 'exchange_rate',
  usd_equivalent: 'usd_equivalent',
  current_buy_value: 'current_buy_value',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ModelSubscriptionPackScalarFieldEnum = {
  id: 'id',
  subscription_id: 'subscription_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  user_id: 'user_id'
};

exports.Prisma.ModelSubscriptionTierScalarFieldEnum = {
  id: 'id',
  subscription_id: 'subscription_id',
  tier_name: 'tier_name',
  tier_price: 'tier_price',
  tier_description: 'tier_description',
  tier_duration: 'tier_duration',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.UserSubscriptionCurrentScalarFieldEnum = {
  id: 'id',
  subscription_id: 'subscription_id',
  user_id: 'user_id',
  model_id: 'model_id',
  subscription: 'subscription',
  created_at: 'created_at',
  updated_at: 'updated_at',
  userId: 'userId',
  ends_at: 'ends_at'
};

exports.Prisma.UserSubscriptionHistoryScalarFieldEnum = {
  id: 'id',
  subscription_id: 'subscription_id',
  user_id: 'user_id',
  model_id: 'model_id',
  subscription: 'subscription',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.UserLocationScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  latitude: 'latitude',
  longitude: 'longitude',
  city: 'city',
  state: 'state',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.GlobalPointsBuyScalarFieldEnum = {
  id: 'id',
  points_buy_id: 'points_buy_id',
  points: 'points',
  amount: 'amount',
  conversion_rate: 'conversion_rate',
  currency: 'currency',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.UserWithdrawalBankAccountScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  bank_account_id: 'bank_account_id',
  bank_name: 'bank_name',
  account_name: 'account_name',
  account_number: 'account_number',
  bank_type: 'bank_type',
  routing_number: 'routing_number',
  bank_country: 'bank_country',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.UserPointsPurchaseScalarFieldEnum = {
  id: 'id',
  purchase_id: 'purchase_id',
  user_id: 'user_id',
  points: 'points',
  amount: 'amount',
  currency: 'currency',
  exchange_rate: 'exchange_rate',
  usd_equivalent: 'usd_equivalent',
  current_buy_value: 'current_buy_value',
  success: 'success',
  created_at: 'created_at',
  updated_at: 'updated_at',
  userPointsId: 'userPointsId'
};

exports.Prisma.UserAttachmentsScalarFieldEnum = {
  id: 'id',
  path: 'path',
  type: 'type',
  name: 'name',
  size: 'size',
  extension: 'extension',
  created_at: 'created_at',
  updated_at: 'updated_at',
  user_id: 'user_id'
};

exports.Prisma.UserBanksScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  bank_id: 'bank_id',
  bank_name: 'bank_name',
  account_name: 'account_name',
  account_number: 'account_number',
  bank_type: 'bank_type',
  routing_number: 'routing_number',
  swift_code: 'swift_code',
  bank_country: 'bank_country',
  recipient_code: 'recipient_code',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ProductCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  created_at: 'created_at'
};

exports.Prisma.ProductSizeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  created_at: 'created_at'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  product_id: 'product_id',
  user_id: 'user_id',
  name: 'name',
  description: 'description',
  price: 'price',
  category_id: 'category_id',
  instock: 'instock'
};

exports.Prisma.ProductSizePivotScalarFieldEnum = {
  id: 'id',
  product_id: 'product_id',
  size_id: 'size_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ProductImagesScalarFieldEnum = {
  id: 'id',
  product_id: 'product_id',
  image_url: 'image_url',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.CartScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  product_id: 'product_id',
  quantity: 'quantity',
  size_id: 'size_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.WishListScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  product_id: 'product_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  order_id: 'order_id',
  user_id: 'user_id',
  total_amount: 'total_amount',
  created_at: 'created_at',
  updated_at: 'updated_at',
  payment_reference: 'payment_reference',
  payment_status: 'payment_status',
  shipping_address: 'shipping_address',
  status: 'status'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  id: 'id',
  order_id: 'order_id',
  product_id: 'product_id',
  quantity: 'quantity',
  price: 'price',
  size_id: 'size_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.PendingCheckoutScalarFieldEnum = {
  id: 'id',
  reference: 'reference',
  user_id: 'user_id',
  order_data: 'order_data',
  created_at: 'created_at',
  expires_at: 'expires_at'
};

exports.Prisma.HelpCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  created_at: 'created_at'
};

exports.Prisma.HelpArticlesScalarFieldEnum = {
  id: 'id',
  article_id: 'article_id',
  category_id: 'category_id',
  title: 'title',
  content: 'content',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.HelpContactScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  subject: 'subject',
  message: 'message',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.FAQScalarFieldEnum = {
  id: 'id',
  question: 'question',
  created_at: 'created_at'
};

exports.Prisma.FAQAnswersScalarFieldEnum = {
  id: 'id',
  faq_id: 'faq_id',
  answer: 'answer',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.TagScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  messageId: 'messageId',
  created_at: 'created_at'
};

exports.Prisma.GroupsScalarFieldEnum = {
  id: 'id',
  adminId: 'adminId',
  created_at: 'created_at',
  description: 'description',
  groupIcon: 'groupIcon',
  groupType: 'groupType',
  isActive: 'isActive',
  name: 'name',
  updated_at: 'updated_at'
};

exports.Prisma.GroupMessageScalarFieldEnum = {
  id: 'id',
  content: 'content',
  senderId: 'senderId',
  created_at: 'created_at',
  editedAt: 'editedAt',
  groupId: 'groupId',
  isEdited: 'isEdited',
  messageType: 'messageType',
  replyToId: 'replyToId',
  deliveryStatus: 'deliveryStatus',
  updated_at: 'updated_at'
};

exports.Prisma.GroupAttachmentScalarFieldEnum = {
  id: 'id',
  url: 'url',
  type: 'type',
  messageId: 'messageId',
  created_at: 'created_at',
  fileName: 'fileName',
  fileSize: 'fileSize'
};

exports.Prisma.GroupSettingsScalarFieldEnum = {
  id: 'id',
  allowFileSharing: 'allowFileSharing',
  allowMediaSharing: 'allowMediaSharing',
  allowMemberInvites: 'allowMemberInvites',
  autoApproveJoinReqs: 'autoApproveJoinReqs',
  created_at: 'created_at',
  groupId: 'groupId',
  moderateMessages: 'moderateMessages',
  mutedUntil: 'mutedUntil',
  updated_at: 'updated_at'
};

exports.Prisma.BlockedGroupParticipantScalarFieldEnum = {
  id: 'id',
  blockedBy: 'blockedBy',
  created_at: 'created_at',
  groupId: 'groupId',
  reason: 'reason',
  updated_at: 'updated_at',
  userId: 'userId'
};

exports.Prisma.GroupMemberScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  groupId: 'groupId',
  role: 'role',
  joinedAt: 'joinedAt',
  lastSeen: 'lastSeen',
  isMuted: 'isMuted',
  mutedBy: 'mutedBy',
  mutedUntil: 'mutedUntil',
  isBlocked: 'isBlocked',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ActivityLogScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  action: 'action',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.LoginHistoryScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  ip_address: 'ip_address',
  device: 'device',
  city: 'city',
  state: 'state',
  capital: 'capital',
  country: 'country',
  countryCode: 'countryCode',
  continent: 'continent',
  longitude: 'longitude',
  latitude: 'latitude',
  location: 'location',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.TwoFactorAuthScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  code: 'code',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.BatchProcessLogsScalarFieldEnum = {
  id: 'id',
  job_id: 'job_id',
  job_name: 'job_name',
  job_data: 'job_data'
};

exports.Prisma.ResetPasswordRequestsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  password: 'password',
  reset_code: 'reset_code',
  completed: 'completed',
  expires_at: 'expires_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.WithdrawalRequestCodeScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  code: 'code',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.WithdrawalRequestScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  amount: 'amount',
  recipient_code: 'recipient_code',
  bank_account_id: 'bank_account_id',
  reason: 'reason',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at',
  reference: 'reference',
  transfer_code: 'transfer_code',
  paystack_response: 'paystack_response'
};

exports.Prisma.PlatformExchangeRateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  buyValue: 'buyValue',
  sellValue: 'sellValue',
  rate: 'rate',
  symbol: 'symbol',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.OuterPagesScalarFieldEnum = {
  id: 'id',
  page_id: 'page_id',
  slug: 'slug',
  title: 'title',
  content: 'content',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.SupportTicketsScalarFieldEnum = {
  id: 'id',
  ticket_id: 'ticket_id',
  user_id: 'user_id',
  subject: 'subject',
  message: 'message',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.SupportTicketRepliesScalarFieldEnum = {
  id: 'id',
  ticket_id: 'ticket_id',
  user_id: 'user_id',
  message: 'message',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ConfigurationsScalarFieldEnum = {
  id: 'id',
  app_name: 'app_name',
  app_version: 'app_version',
  app_url: 'app_url',
  app_description: 'app_description',
  app_logo: 'app_logo',
  default_currency: 'default_currency',
  default_rate: 'default_rate',
  default_symbol: 'default_symbol',
  point_conversion_rate: 'point_conversion_rate',
  point_conversion_rate_ngn: 'point_conversion_rate_ngn',
  min_withdrawal_amount: 'min_withdrawal_amount',
  min_withdrawal_amount_ngn: 'min_withdrawal_amount_ngn',
  min_deposit_amount: 'min_deposit_amount',
  min_deposit_amount_ngn: 'min_deposit_amount_ngn',
  default_mode: 'default_mode',
  primary_color: 'primary_color',
  secondary_color: 'secondary_color',
  accent_color: 'accent_color',
  home_feed_limit: 'home_feed_limit',
  personal_profile_limit: 'personal_profile_limit',
  personal_media_limit: 'personal_media_limit',
  personal_repost_limit: 'personal_repost_limit',
  post_page_comment_limit: 'post_page_comment_limit',
  post_page_comment_reply_limit: 'post_page_comment_reply_limit',
  other_user_profile_limit: 'other_user_profile_limit',
  other_user_media_limit: 'other_user_media_limit',
  other_user_repost_limit: 'other_user_repost_limit',
  notification_limit: 'notification_limit',
  transaction_limit: 'transaction_limit',
  model_search_limit: 'model_search_limit',
  conversation_limit: 'conversation_limit',
  message_limit: 'message_limit',
  group_message_limit: 'group_message_limit',
  group_participant_limit: 'group_participant_limit',
  group_limit: 'group_limit',
  hookup_enabled: 'hookup_enabled',
  hookup_page_limit: 'hookup_page_limit',
  status_limit: 'status_limit',
  subscription_limit: 'subscription_limit',
  subscribers_limit: 'subscribers_limit',
  active_subscribers_limit: 'active_subscribers_limit',
  followers_limit: 'followers_limit',
  upload_media_limit: 'upload_media_limit',
  model_upload_media_limit: 'model_upload_media_limit',
  profile_updated_success_message: 'profile_updated_success_message',
  profile_updated_error_message: 'profile_updated_error_message',
  profile_updating_message: 'profile_updating_message',
  profile_image_updated_success_message: 'profile_image_updated_success_message',
  profile_image_updated_error_message: 'profile_image_updated_error_message',
  profile_image_updating_message: 'profile_image_updating_message',
  point_purchase_success_message: 'point_purchase_success_message',
  point_purchase_error_message: 'point_purchase_error_message',
  point_purchasing_message: 'point_purchasing_message',
  point_purchase_minimum_message: 'point_purchase_minimum_message',
  welcome_message_title: 'welcome_message_title',
  welcome_message_content: 'welcome_message_content',
  welcome_message_enabled: 'welcome_message_enabled',
  welcome_message_delay: 'welcome_message_delay',
  created_at: 'created_at',
  updated_at: 'updated_at',
  platform_deposit_fee: 'platform_deposit_fee',
  platform_withdrawal_fee: 'platform_withdrawal_fee'
};

exports.Prisma.PostGiftScalarFieldEnum = {
  id: 'id',
  gifter_id: 'gifter_id',
  receiver_id: 'receiver_id',
  post_id: 'post_id',
  points: 'points',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.UserWithdrawalPinScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  pin: 'pin',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.UserBlockScalarFieldEnum = {
  id: 'id',
  block_id: 'block_id',
  blocker_id: 'blocker_id',
  blocked_id: 'blocked_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.PurchasedPostsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  post_id: 'post_id',
  purchase_id: 'purchase_id',
  price: 'price',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.AutomatedMessageScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  message_type: 'message_type',
  message_text: 'message_text',
  attachments: 'attachments',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.GroupMessageReadScalarFieldEnum = {
  id: 'id',
  messageId: 'messageId',
  userId: 'userId',
  readAt: 'readAt'
};

exports.Prisma.GroupJoinRequestScalarFieldEnum = {
  id: 'id',
  groupId: 'groupId',
  userId: 'userId',
  message: 'message',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.GroupInvitationScalarFieldEnum = {
  id: 'id',
  groupId: 'groupId',
  inviterId: 'inviterId',
  inviteeId: 'inviteeId',
  message: 'message',
  status: 'status',
  expiresAt: 'expiresAt',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ReferralsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  referral_id: 'referral_id',
  code: 'code',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ReferralEarningsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  points: 'points',
  description: 'description',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ConversationFreeMessageScalarFieldEnum = {
  id: 'id',
  conversation_id: 'conversation_id',
  user_id: 'user_id',
  enabled: 'enabled',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserRole = exports.$Enums.UserRole = {
  fan: 'fan',
  model: 'model',
  admin: 'admin',
  support: 'support'
};

exports.VerificationStateEnum = exports.$Enums.VerificationStateEnum = {
  not_started: 'not_started',
  started: 'started',
  pending: 'pending',
  approved: 'approved',
  rejected: 'rejected'
};

exports.MediaState = exports.$Enums.MediaState = {
  processing: 'processing',
  completed: 'completed',
  failed: 'failed'
};

exports.PostStatus = exports.$Enums.PostStatus = {
  pending: 'pending',
  approved: 'approved',
  rejected: 'rejected'
};

exports.PostAudience = exports.$Enums.PostAudience = {
  public: 'public',
  private: 'private',
  price: 'price',
  followers: 'followers',
  subscribers: 'subscribers'
};

exports.NotificationTypes = exports.$Enums.NotificationTypes = {
  follow: 'follow',
  like: 'like',
  purchase: 'purchase',
  comment: 'comment',
  repost: 'repost',
  message: 'message',
  live: 'live',
  sparkle: 'sparkle'
};

exports.TransactionType = exports.$Enums.TransactionType = {
  credit: 'credit',
  debit: 'debit',
  pending: 'pending',
  referral: 'referral'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  pending: 'pending',
  paid: 'paid',
  failed: 'failed'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  pending: 'pending',
  processing: 'processing',
  shipped: 'shipped',
  delivered: 'delivered',
  cancelled: 'cancelled'
};

exports.GroupType = exports.$Enums.GroupType = {
  PUBLIC: 'PUBLIC',
  PRIVATE: 'PRIVATE',
  SECRET: 'SECRET'
};

exports.GroupMemberRole = exports.$Enums.GroupMemberRole = {
  ADMIN: 'ADMIN',
  MODERATOR: 'MODERATOR',
  MEMBER: 'MEMBER'
};

exports.WithdrawalRequestStatus = exports.$Enums.WithdrawalRequestStatus = {
  pending: 'pending',
  processing: 'processing',
  rejected: 'rejected',
  completed: 'completed',
  approved: 'approved'
};

exports.AutomatedMessageType = exports.$Enums.AutomatedMessageType = {
  followers: 'followers',
  subscribers: 'subscribers'
};

exports.JoinRequestStatus = exports.$Enums.JoinRequestStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.InvitationStatus = exports.$Enums.InvitationStatus = {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  DECLINED: 'DECLINED',
  EXPIRED: 'EXPIRED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Participants: 'Participants',
  Conversations: 'Conversations',
  Messages: 'Messages',
  OldUsername: 'OldUsername',
  Model: 'Model',
  UploadedMedia: 'UploadedMedia',
  UserMedia: 'UserMedia',
  UserRepost: 'UserRepost',
  UserStory: 'UserStory',
  StoryMedia: 'StoryMedia',
  StoryView: 'StoryView',
  Post: 'Post',
  PostImpression: 'PostImpression',
  ProfileView: 'ProfileView',
  CommentView: 'CommentView',
  PostComment: 'PostComment',
  CommentImpression: 'CommentImpression',
  PostCommentAttachments: 'PostCommentAttachments',
  PostCommentLikes: 'PostCommentLikes',
  PostLike: 'PostLike',
  PostShared: 'PostShared',
  Follow: 'Follow',
  Subscribers: 'Subscribers',
  LiveStream: 'LiveStream',
  LiveStreamParticipants: 'LiveStreamParticipants',
  LiveStreamComment: 'LiveStreamComment',
  LiveStreamLike: 'LiveStreamLike',
  LiveStreamView: 'LiveStreamView',
  Settings: 'Settings',
  Notifications: 'Notifications',
  ReportUser: 'ReportUser',
  ReportPost: 'ReportPost',
  ReportComment: 'ReportComment',
  ReportLive: 'ReportLive',
  ReportMessage: 'ReportMessage',
  UserPoints: 'UserPoints',
  PointConversionRateUsers: 'PointConversionRateUsers',
  PointConversionRate: 'PointConversionRate',
  UserWallet: 'UserWallet',
  UserTransaction: 'UserTransaction',
  ModelSubscriptionPack: 'ModelSubscriptionPack',
  ModelSubscriptionTier: 'ModelSubscriptionTier',
  UserSubscriptionCurrent: 'UserSubscriptionCurrent',
  UserSubscriptionHistory: 'UserSubscriptionHistory',
  UserLocation: 'UserLocation',
  GlobalPointsBuy: 'GlobalPointsBuy',
  UserWithdrawalBankAccount: 'UserWithdrawalBankAccount',
  UserPointsPurchase: 'UserPointsPurchase',
  UserAttachments: 'UserAttachments',
  UserBanks: 'UserBanks',
  ProductCategory: 'ProductCategory',
  ProductSize: 'ProductSize',
  Product: 'Product',
  ProductSizePivot: 'ProductSizePivot',
  ProductImages: 'ProductImages',
  Cart: 'Cart',
  WishList: 'WishList',
  Order: 'Order',
  OrderItem: 'OrderItem',
  PendingCheckout: 'PendingCheckout',
  HelpCategory: 'HelpCategory',
  HelpArticles: 'HelpArticles',
  HelpContact: 'HelpContact',
  FAQ: 'FAQ',
  FAQAnswers: 'FAQAnswers',
  Tag: 'Tag',
  Groups: 'Groups',
  GroupMessage: 'GroupMessage',
  GroupAttachment: 'GroupAttachment',
  GroupSettings: 'GroupSettings',
  BlockedGroupParticipant: 'BlockedGroupParticipant',
  GroupMember: 'GroupMember',
  ActivityLog: 'ActivityLog',
  LoginHistory: 'LoginHistory',
  TwoFactorAuth: 'TwoFactorAuth',
  BatchProcessLogs: 'BatchProcessLogs',
  ResetPasswordRequests: 'ResetPasswordRequests',
  WithdrawalRequestCode: 'WithdrawalRequestCode',
  WithdrawalRequest: 'WithdrawalRequest',
  PlatformExchangeRate: 'PlatformExchangeRate',
  OuterPages: 'OuterPages',
  SupportTickets: 'SupportTickets',
  SupportTicketReplies: 'SupportTicketReplies',
  Configurations: 'Configurations',
  PostGift: 'PostGift',
  UserWithdrawalPin: 'UserWithdrawalPin',
  UserBlock: 'UserBlock',
  PurchasedPosts: 'PurchasedPosts',
  AutomatedMessage: 'AutomatedMessage',
  GroupMessageRead: 'GroupMessageRead',
  GroupJoinRequest: 'GroupJoinRequest',
  GroupInvitation: 'GroupInvitation',
  Referrals: 'Referrals',
  ReferralEarnings: 'ReferralEarnings',
  ConversationFreeMessage: 'ConversationFreeMessage'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
